var url = require('url')
  , pth = require('path')
  , fs = require('fs');

var marked = require( 'marked' );
var markdown = require( 'markdown' ).markdown;

var ExpressRouter = function( options ) {
	this.options = options || {};
	this.options.redirect = typeof this.options.redirect != 'undefined'
		? this.options.redirect : false;
	this.options.ext = this.options.ext ? this.options.ext : 'md';
	this.options.index = this.options.index || 'index';
	this.options.dir = this.options.dir || __dirname;
	this.options.view = this.options.view || 'markdown';
	this.options.key = this.options.key || 'markdown';
	this.options.compiler = this.options.compiler || marked;

	this.route( options );
}

/**
*	Sets the compiler used to marked.
*/
ExpressRouter.prototype.setMarkedCompiler = function() {
	this.options.compiler = marked;
}

/**
*	Sets the compiler used to markdown.
*/
ExpressRouter.prototype.setMarkdownRenderer = function() {
	this.options.compiler = markdown.toHTML;
}

/**
*	Configures a route for the express application.
*/
ExpressRouter.prototype.route = function( options ) {
	if( !this.options.app ) {
		throw new Error( "No express application configured" );
		return;
	}

	var self = this;
	if( this.options.app && options.url && options.dir ) {
		this.options.app.get( options.url, function( req, res, next ) {
			self.handler.call(
				self, req, res, next, options );
		} );
	}
}

ExpressRouter.prototype.handler = function( req, res, next, options ) {
	var self = this;
	var redirect = typeof options.redirect != 'undefined'
    ? options.redirect : this.options.redirect;
	var ext = options.ext ? '.' + options.ext : '.' + this.options.ext;
	var dir = pth.normalize(options.dir || this.options.dir);

	//console.log( 'got url: ' + req.url );
	//console.log( 'got url: ' + options.url );

  var requrl = req.url;
	requrl = requrl.replace( /\/+$/, "" );
	var index = requrl.lastIndexOf( '/' );
	var name = requrl.substring( index + 1 );
  var root = options.url.indexOf(requrl) == 0;
	if( root || name == '' ) {
    name = options.index || this.options.index;
  }

  //console.log( 'got dir: ' + dir );
  //console.log( 'got ext: ' + ext );
  //console.log( 'got redirect %s', redirect );

	//the url does not already include the extension so add it
	var hasExtension =
    ( name.lastIndexOf( ext ) == ( name.length - ext.length ) );
	if( !hasExtension ) {
		name += ext;
	}
	if( hasExtension && redirect ) {
    var target = req.url.replace( ext, "" );
    var indexreq = new RegExp(options.index + "\\" + ext + "$");
    if(indexreq.test(req.url)) {
      target = req.url.replace(indexreq,"");
      target = target.replace(/\/+$/, "");
    }
		res.redirect(target);
		return;
	}
	dir = dir.replace( /\/+$/, "" );
	var path = dir + '/' + name;
  //console.log("Got path %s", path);
  //console.log("Got url %s", req.url);
  var preferred = dir + req.url.replace(options.base, '') + ext;
  //console.log("got preferred: " + preferred);

  fs.exists(preferred, function(exists) {
    if(exists) {
      return self.render(req, res, next, options, preferred);
    }else{
      // prefer a file matching the request plus extension
      fs.exists( path, function( exists ) {
        //console.log("exists %s", exists);
        if( exists ) {
          self.render(req, res, next, options, path);
        }else{
          // no file extension, look for a directory index page
          if(!/\.+/.test(req.url)) {
            //console.log("looking for index page..");
            var remainder = req.url.replace(
              new RegExp("^" + options.base), "" );
            dir += remainder;
            name = options.index + ext;
            path = dir + "/" + name;
            fs.exists( path, function( exists ) {
              if( exists ) {
                self.render(req, res, next, options, path);
              }else{
                next();
              }
            } );
          }else{
            next();
          }
        }
      });
    }
  });
}

ExpressRouter.prototype.render = function(req, res, next, options, path) {
  var self = this;
	var view = options.view || 'markdown';
	var key = options.key || 'markdown';
	var template = options.data || {};
  fs.readFile( path, function( err, data ) {
    if( err ) throw err;
    var contents = data.toString();
    template[ key ] = self.options.compiler( contents );
    res.render( view, template );
  } );
}

module.exports.route = function( options ) {
  return new ExpressRouter( options ).route( options );
}
